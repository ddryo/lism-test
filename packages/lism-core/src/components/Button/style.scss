:where(.c--button) {
	--keycolor: var(--b900);
	--icon--scale: 1.25; // offsetとバランス合わせる
	--icon--offset: 0%; //25%;

	// default(fill)用
	--bgc: transparent;
	--bdc: transparent; // reverse用
	--c: currentColor; // filledColor?

	// --hov--c: var(--bgc);
	// --hov--bgc: var(--c);
	// --hov--bdc: var(--bdc);
}
// py は小さめにして、minHで最低限の高さを確保.
.c--button {
	--link--td: none; // pタグ内にくるかもしれないので
	align-items: center;
	padding: var(--em--3) var(--em--10); // .375em 1em
	gap: var(--em--5);
	width: fit-content;
	color: var(--c);
	background-color: var(--bgc);
	border: solid 1px var(--bdc); // アウトラインと並べたときにサイズに差がでないように
	min-block-size: 3em;
	// min-width: 2em;
}

// .c--button:where(.-hov\:reverse):hover {
// 	color: var(--hov--c);
// 	background-color: var(--hov--bgc);
// 	// border-color: var(--hov--bdc);
// }

// デフォルトスタイル
// .c--button:not([class*='c--button--'])
.c--button--fill {
	--c: var(--c--opposite); // filledColor?
	--bgc: var(--keycolor);
	--bdc: var(--bgc);
	// --hov--bgc: transparent;
}

// c--button--style
.c--button--outline {
	--c: var(--bdc); // bdc上書きするだけで --c も変わるように
	// --bgc: transparent;
	--bdc: var(--keycolor);
	--hov--c: var(--c--opposite);
	// --rev--bgc: var(--bdc);
}

// c--button--style
.c--button--ghost {
	--c: var(--keycolor);
	// --bgc: transparent;
	// --bdc: transparent;
	--hov--c: var(--c--opposite);
}

// .c--button.l--grid,
.c--button:where(.l--grid) {
	--gtc: 1em 1fr 1em; // アイコン部分を固定幅にすることで、テキストを常に中央に配置
}

// :where(.l--grid) > .c--button__text {
// 	justify-self: center;
// }

.c--button__icon {
	scale: var(--icon--scale);
	// flex-shrink: 0; // → e--icon についてる

	&:where(:only-child) {
		--icon--offset: 0;
	}
	&:where(:first-child) {
		translate: calc(0px - var(--icon--offset));
	}
	// &[data-position='right']
	&:where(:last-child) {
		translate: var(--icon--offset);
	}
}
