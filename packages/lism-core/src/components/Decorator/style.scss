:where(.e--decorator) {
	position: relative;
	--size: 1em;
	width: var(--size);
	height: var(--size);
}
// .e--decorator {
// 	display: block;
// }

.d--call {
	--bdc: currentColor;
}
.d--call > .e--decorator {
	--bdc: inherit;
}

// ユーティリティクラスの importantを上書きするため、@layer
@layer lism-init {
	.d--balloon {
		--bgc: var(--bgc--base);
		--bdc: currentColor;
		color: var(--c--base);
		background-color: transparent !important; // innnerに背景色を渡すだけ
	}
}

.d--balloon > .e--decorator,
.d--balloon__body {
	border: solid 1px var(--bdc);
	background-color: var(--bgc);
}
.d--balloon__body {
	// --bdc: inherit;
	// background-color: var(--bgc);
	// border: solid 1px var(--bdc);

	// position: relative;
	// &::before {
	// 	position: absolute;
	// 	top: 0;
	// 	left: 0;
	// 	content: '';
	// 	opacity: 0.5;
	// 	width: 50%;
	// 	display: block;
	// 	height: 50%;
	// 	background-color: red;
	// }
	// &::after {
	// 	position: absolute;
	// 	bottom: 0;
	// 	right: 0;
	// 	content: '';
	// 	opacity: 0.5;
	// 	width: 50%;
	// 	display: block;
	// 	height: 50%;
	// 	background-color: red;
	// }
}

// ユーティリティクラスの importantを上書きするため、@layer
@layer lism-init {
	.d--sticky {
		background-color: transparent !important; // innnerに背景色を渡すだけ
	}
}
.d--sticky {
	--bgc: var(--bgc--pale);
	--bdc: currentColor;
	color: var(--c--base);
}
.d--sticky__body {
	--bdw: 0.5em;
	--bdc: inherit;
	width: fit-content;
	min-width: 8em;
	max-width: 30em;
	background-color: var(--bgc);
	box-shadow: 1px 1px 2px 0px hsl(var(--shadow--hsl) / 0.08);

	&::before {
		position: absolute;
		bottom: 4px;
		right: 4px;
		z-index: -1;
		min-width: 4em;
		width: min(50%, 12em);
		height: 50%;
		background-color: hsl(var(--shadow--hsl) / 0.2);
		transform: rotate(4deg);
		transform-origin: left bottom;
		filter: blur(4px);
		content: '';
	}
}

.d--pipipi {
	--deco--size: 0.5em;
	--deco--trnsltX: var(--deco--size);
	--bdc: currentColor;
}
.d--pipipi__body {
	padding-top: calc(var(--deco--size) + 0.325em);
	padding-inline: calc(var(--deco--size) + 0.5em);
}
.d--pipipi--right {
	--deco--trnsltX: calc(0px - var(--deco--size));
}

// .d--pipipi > .e--decorator,
.e--decorator--pipipi {
	width: 1px;
	height: var(--deco--size);
	translate: var(--deco--trnsltX) 50%;
	background-color: var(--bdc);

	&::before,
	&::after {
		content: '';
		display: block;
		width: 1px;
		height: 88%;
		position: absolute;
		background-color: inherit;
		transform-origin: bottom;
	}
	&::before {
		bottom: -0.125em;
		left: -0.5em;
		rotate: -30deg;
	}
	&::after {
		bottom: -0.125em;
		right: -0.5em;
		rotate: 30deg;
	}
}

.-bg\:grid {
	:where(&) {
		--bg-grid--color: hsl(var(--hs--basic) 50% / 12%); //var(--b200);
		--bg-grid--size: 16px;
	}

	// --bg-grid--color: color-mix(in srgb, currentColor, transparent 92%);
	background-image: linear-gradient(
			transparent calc(100% - 1px),
			var(--bg-grid--color) 50%,
			var(--bg-grid--color)
		),
		linear-gradient(
			90deg,
			transparent calc(100% - 1px),
			var(--bg-grid--color) 50%,
			var(--bg-grid--color)
		);
	background-repeat: repeat;
	background-size: var(--bg-grid--size) var(--bg-grid--size);
	background-position: calc(var(--bg-grid--size) / 2);
}

.-bg\:stripe {
	:where(&) {
		--bg-stripe--color: hsl(var(--hs--basic) 50% / 12%);
		// --bg-stripe--color: var(--b200); //color-mix(in srgb, currentColor, transparent 92%);
		--bg-stripe--deg: -30deg;
		--bg-stripe--interval: 6px;
	}
	background-image: repeating-linear-gradient(
		var(--bg-stripe--deg),
		var(--bg-stripe--color),
		var(--bg-stripe--color) 1px,
		transparent 1px,
		transparent var(--bg-stripe--interval)
	);
}

// 黒い影はユーティリティで上書きできるように。

// 白の1pxボーダーは、透過白背景をグラデーションにするとバグるのでborderではなくshadowで。
.-bg\:glass {
	:where(&) {
		--bg-glass--blur: 20px;
		--bxsh: 0 0 0 transparent;
	}
	// background-color: transparent;
	// background: linear-gradient(135deg, rgba(255, 255, 255, 0.1), transparent);

	backdrop-filter: brightness(1.15) blur(var(--bg-glass--blur));
	text-shadow: 0.5px 1px rgb(0 0 0 / 8%);
	// shadowユーティリティに負けないように important.
	box-shadow:
		inset 0 0 0 1px rgb(255 255 255 / 20%),
		inset 10px 20px 40px -20px rgb(255 255 255 / 10%),
		var(--bxsh) !important;
}

// gradient={token, angle, from, to}
// .-gradient\:to-top {
// 	--gradient-angle: to top;
// }

// radial-gradient(
// angle

[class*='-gradient:'] {
	background-image: var(--gradient);
}

:root {
	// グラデーション用のカラープリセット
	--gradient-color--black-to-transparent: rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0) 100%;
	--gradient-color--lime: #abecd6 0%, #fbed96 100%;
	--gradient-color--dense-water: #3ab5b0 0%, #3d99be 31%, #56317a 100%;

	// gradientプリセット
	--gradient--black-to-bottom: linear-gradient(to top, rgba(0, 0, 0, 0.4), rgba(0, 0, 0, 0) 50%),
		linear-gradient(to top, rgba(0, 0, 0, 0.8), rgba(0, 0, 0, 0) 100%);

	--gradient--sunset: linear-gradient(
		to top,
		#3f51b1 0%,
		#5a55ae 13%,
		#7b5fac 25%,
		#8f6aae 38%,
		#a86aa4 50%,
		#cc6b8e 62%,
		#f18271 75%,
		#f3a469 87%,
		#f7c978 100%
	);
	--gradient--2: linear-gradient(to top, #a8edea 0%, #fed6e3 100%);
	--gradient--blue: linear-gradient(to right, #4facfe 0%, #00f2fe 100%);
}
