// --------------------
// divider
// --------------------
:where(.l--divider) {
	--c: var(--bgc--base);
	--level: 0;
	--rotateX: 0deg;
	--rotateY: 0deg;
	--duration: 12s;
	--offset: 0;
	--stretch: 1;
}

// heightが.-h:で上書きできるかあとでチェック
.l--divider {
	position: relative;
	height: clamp(
		calc(6px * var(--level)),
		calc(1cqw * var(--level)),
		calc(12px * var(--level))
	); // 600px時点を最小値, 1200px時点を最大値にして、clampで高さを変動させる

	max-width: 100%; // is--constrained の影響を受けないようにする
	overflow: hidden;
	color: var(--c);

	&[data-flip~='y'] {
		--rotateY: 180deg;
	}
	&[data-flip~='x'] {
		--rotateX: 180deg;
		top: -0.5px; // transform で上下反転させると隙間ができてしまう
	}
	&:not([data-flip~='x']) {
		bottom: -0.5px;
	}
}
.l--divider__inner {
	position: absolute;
	inset: 0;
	scale: var(--stretch) 1;
	translate: var(--offset);
	transform: rotateX(var(--rotateX)) rotateY(var(--rotateY));
}

.l--divider__svg {
	color: inherit;
	width: 100%;
	height: 100%;
	path {
		fill: currentColor;
	}
}

/* 左右にスライドするだけ */
@keyframes LsDividerMove {
	0% {
		transform: scaleX(4);
	}
	100% {
		transform: scaleX(4) translateX(calc(100% - 25%));
	}
}
.l--divider[data-animation] .l--divider__svg {
	/* ↓ X 100% にしてるのは translateXのcalc計算で * -1 をしなくていいように。*/
	transform-origin: 100% 0;
	animation: LsDividerMove var(--duration) infinite alternate linear;
}
