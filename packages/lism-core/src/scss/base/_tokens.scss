/* ------------------------------------------------------------
	グローバルトークン。
	特定のセレクタに対する変数: --[target--]prop
	プリセット変数: --{prop}-{variant}
	
	ローカルな変数について
		自身のプロパティ: --{prop}
		子要素: --{item}--{prop}
			--rev--c, --icon--offset, --item--minW
 ------------------------------------------------------------ */

/* ------------------------------------------------------------
	段階的な値は基本的に
	　→ 0,10,20,30,...
	  → why? → 間を増やせるように、1,2,3,... ではなく10単位ベース

	レイヤー的な段階値
	  → 0, 1,2,3..., -1,-2,...

	カラーの段階値は 100,200,300 ?　→ 10,20,...に揃えてもいいか。

	真ん中のデフォルト値があって、そこから見て小さいか大きいか
	 →　l, xl. 2xl, ...
	 → s, xs, 2xs, ...
	 - ベース = m or r

 ------------------------------------------------------------ */
:root {
	/* ------------------------------------------------------------
	  コンテンツサイズ: ユーザー側で定義が必要
	    コンテンツサイズは960 ~ 1120 くらいがよさそう.
	    1080 にしてるのは、 1920 * 1080画像がきれいに配置できるため？
	------------------------------------------------------------ */
	// コンテンツサイズは960 ~ 1120 くらいがよさそう. @lg よりは大きく?
	--ls--contentSize: 1120px; // = --wp--style--global--content-size.
	--ls--contentSize--wide: 1440px; // = --wp--style--global--wide-size. alignwide で使う.
	--ls--contentSize--slim: 45rem; // slim幅1カラムテンプレートで使う. fz:16px時 = 720px

	// コンテンツの左右の余白
	--ls--gutter: clamp(1.5rem, 4vw, 2rem); // var(--space-50) とかを使うべきか？

	// ボーダーカラー
	// --ls--bdc--table: #dcdcdc;

	// hoverユーティリティ用 → --ls--?
	--hov--duration: 0.3s;

	/* ------------------------------------------------------------
	    タイポグラフィ
	------------------------------------------------------------ */

	--ff--base: sans-serif;
	--ff--emoji: 'Apple Color Emoji', 'Segoe UI Emoji', 'Noto Color Emoji', 'Android Emoji',
		'Segoe UI Symbol';
	--ff--mono: Menlo, Consolas, monaco, monospace;
	// --ff--sans, --ff--serif;
	// meta, heading

	// letter-spacing
	--lts--base: 0;
	--lts--tight: 0;
	--lts--wide: 0;

	// --root--ff: sans-serif;
	// --root--fz: clamp(14px, 4vw, 1rem); // 1rem: ブラウザ標準はほぼ16px
	// --root--fz: clamp(0.875rem, 0.625rem + 1vw, 1rem); // 400 - 600
	// --root--lh: 1.75;

	// font-size 変数
	--fz--root: clamp(0.875rem, 0.625rem + 1vw, 1rem); // 400 - 600
	// --fz--hero?
	--fz--m: 1em; // デフォルトでフォントサイズ 変わっているものを1emにリセットしたい時に必要
	--fz--r: 1rem; // → --fz--base?

	// 倍音列(分子8) での計算値
	--fz--5xl: 4em; //calc(1em * 8 / 2);
	--fz--4xl: 2.667em; // calc(1em * 8 / 3);
	--fz--3xl: 2em; //calc(1em * 8 / 4);
	--fz--2xl: 1.6em; //calc(1em * 8 / 5);
	--fz--xl: 1.333em; //calc(1em * 8 / 6);
	--fz--l: 1.143em; //calc(1em * 8 / 7);
	--fz--s: 0.889em; // calc(1em * 8 / 9);
	--fz--xs: 0.8em; //calc(1em * 8 / 10);
	--fz--2xs: 0.727em; //calc(1em * 8 / 11);

	// --fzMolecule: 8; // 7~9に対応.
	// --fz--5xl: min(5em, calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 6)));
	// --fz--4xl: min(4em, calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 5)));
	// --fz--3xl: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 4));
	// --fz--2xl: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 3));
	// --fz--xl: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 2));
	// --fz--l: calc(1em * var(--fzMolecule) / (var(--fzMolecule) - 1));
	// --fz--s: calc(1em * var(--fzMolecule) / (var(--fzMolecule) + 1));
	// --fz--xs: calc(1em * var(--fzMolecule) / (var(--fzMolecule) + 2));
	// --fz--2xs: calc(1em * var(--fzMolecule) / (var(--fzMolecule) + 3));

	// clampでテキストサイズを変化させたい領域に指定する
	// --fz-fluid: clamp(0.9rem, 0.8rem + 0.5cqw, 1rem); // 小さい方向のみ. 320: .9rem ~ 640: 1rem
	--fz-fluid: clamp(0.9rem, 0.75rem + 0.8cqw, 1rem); // 小さい方向のみ. 300: .9rem ~ 500: 1rem

	// --fz-fluid: clamp(0.9rem, 0.8rem + 0.5cqw, 1.1rem); // 上下両方. 320: .9rem ~ 960: 1.1rem
	// --fz-fluid: clamp(0.9rem, 0.825rem + 0.4cqw, 1.1rem); // 上下両方. 300: .9rem ~ 1100: 1.1rem
	// --fz-fluid: clamp(0.9rem, 0.85rem + 0.27cqw, 1.05rem); // 上下両方. 300: .9rem ~ 1200: 1.05rem
	// --fz-fluid--l: clamp(1rem, 0.9rem + 0.25cqw, 1.1rem); // 大きい方向のみ 640: 1rem a~ 960: 1.1rem
	// clamp(0.9rem, 0.75rem + 0.75vw, 1.2rem); // 上下両方. 320: .9rem ~ 960: 1.2rem

	// ------------------------------
	// line-height 変数
	// ------------------------------

	// 1~9 だと普通の数値指定と区別がつかない.
	--lh--10: 1;
	--lh--20: 1.125;
	--lh--30: 1.25;
	--lh--40: 1.375;
	--lh--50: 1.5;
	--lh--60: 1.625;
	--lh--70: 1.75;
	--lh--80: 1.875;
	--lh--90: 2;
	// --lh--90: 2.5;

	// --lh--r:
	// --lh:1

	// --lh--4xs: var(--lh--20);
	// --lh--3xs: var(--lh--30);
	// --lh--2xs: var(--lh--40);
	// --lh--xs: var(--lh--50);
	// --lh--xs: var(--lh--30); // button, badge?
	--lh--base: 1.75;
	--lh--xs: calc(var(--lh--base) - 0.25);
	--lh--s: calc(var(--lh--base) - 0.125);
	--lh--l: calc(var(--lh--base) + 0.125);
	// --lh--xl: var(--lh--90);

	// --h1--lh:
	// --h2--lh:
	// --h3--lh:
	// --h4--lh:

	// --lh--xl: var(--lh--70);
	// tight snug - relaxed loose
	// shorter short - tall taller
	// xs s - l xl

	// --lh--base: 1.75;

	// 1, xs          sm       md,  lg  xl
	// 1, 1.25, 1.4, 1.5, 1.6,  1.75, 2,  2.5

	// line-height 変数
	// --ls--lh--contents: 1.8;
	// --ls--lh--heading: 1.8;

	/* ------------------------------------------------------------
	  カラー: ユーザー側で定義できる仕組みも必要
	------------------------------------------------------------ */

	// --color--: 文字色・背景色など共通して採用されるカラー
	--main: #1e4e6b;
	// --main--c: #fff; // 背景が main の時の文字色
	--accent: #be3455;
	// --accent--c: #fff; // 背景が accent の時の文字色
	// --bgc--base: #fdfdfd; // 背景色メイン

	// ベースカラーに合わせたカラーを段階的に用意
	--hs--basic: 215 8%;
	--b50: hsl(var(--hs--basic) 99%);
	--b100: hsl(var(--hs--basic) 96%);
	--b200: hsl(var(--hs--basic) 92%);
	--b300: hsl(var(--hs--basic) 84%);
	--b400: hsl(var(--hs--basic) 72%);
	--b500: hsl(var(--hs--basic) 60%);
	--b600: hsl(var(--hs--basic) 48%);
	--b700: hsl(var(--hs--basic) 36%);
	--b800: hsl(var(--hs--basic) 24%); // 淡い文字色 strong背景色
	--b900: hsl(var(--hs--basic) 8%); // 少しだけ淡い文字色. pre code などで使用
	// --b950: hsl(var(--hs--basic) 8%); // 文字色

	// --c-: 文字色 に関するセマンティックトークン
	--c--base: var(--b900); // 基本の文字色
	--c--pale: var(--b700); // 薄いテキスト色
	--c--opposite: var(--b50); // 背景色と反転
	--c--filled: #fff; // variant="fill"系の文字色

	// --bgc-: 背景色 に関するセマンティックトークン
	--bgc--base: var(--b50); // 基本の背景色
	--bgc--pale: var(--b100); // 薄い背景色
	// --bgc--medium: var(--b200); // 少し濃い背景色? & ボーダー基本色もデフォルトはこれ
	// --bgc--strong: var(--b900); //
	--bgc--opposite: var(--b900); // テキスト色と反転

	// --bdc-: ボーダー色 に関するセマンティックトークン
	--bdc--base: var(--b300); // 基本ボーダーカラー
	--bdc--pale: var(--b200); // 薄いボーダーカラー
	// --bdc--strong: var(--b800);

	// --pallete--?
	--black: #000;
	--white: #fff;
	--red: hsl(4 76% 52%); // #ef4444
	// --red--c: var(--c--filled);
	--orange: hsl(28 80% 52%); // #f97316
	// --orange--c: var(--c--filled);
	--yellow: hsl(52 88% 48%); //#f1b808
	// --yellow--c: #000;
	--green: hsl(148 84% 44%); //#10b981
	// --green--c: #000;
	--blue: hsl(200 80% 52%); //#0ea5e9
	// --blue--c: var(--c--filled);
	--purple: hsl(250 80% 60%); //#8b5cf6
	// --purple--c: var(--c--filled);
	--pink: hsl(325 76% 52%); //#ec4899
	// --pink--c: var(--c--filled);
	--gray: hsl(214 8% 48%); // #64748b;
	// --gray--c: var(--c--filled);

	// ---

	--cMixPer--bg: 95%;
	--cMixPer--text: 12%;
	--cMixPer--bd: 80%;

	/* ------------------------------------------------------------
	    elements
	------------------------------------------------------------ */

	// --table--bdc:
	--th--bgc: var(--bgc--pale);

	// collape にしているので、tfoot 1pxだと見えないことに注意。
	--thead--border: solid 2px var(--b900);
	--tfoot--border: solid 2px var(--b900);
	--hr--color: var(--bdc--base);

	--link--c: #0c61e4;
	--link--underlineOffset: 0.2ex;

	--focus--color: revert;
	--focus--outlineOffset: 1px;

	/* ------------------------------------------------------------
	  カラー: ユーザー側で定義できる仕組みも必要
	------------------------------------------------------------ */
	// フィボナッチ数列 0, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89,
	// 0 .25rem, .5rem, .75rem, 1.25rem, M:(8):2rem, 3.25rem, 5.25rem, 8.5rem

	// 30: 2rem 前後

	--sUnit: 1rem; //var(--root--fz); //1rem;
	--space--0: 0rem;

	// 1=0.25での Fibonacci数列, 5は例外的に 0.125 をセット
	// --space--5: calc(0.125 * var(--sUnit));
	// --space--10: calc(0.25 * var(--sUnit));
	// --space--15: calc(0.5 * var(--sUnit));
	// --space--20: calc(0.75 * var(--sUnit));
	// --space--30: calc(1.25 * var(--sUnit));
	// --space--40: calc(2 * var(--sUnit));
	// --space--50: calc(3.25 * var(--sUnit));
	// --space--60: calc(5.25 * var(--sUnit));
	// ここまでFibonacci
	// ここから等比数列
	// --space--70: calc(var(--space--60) * 1.5);
	--space--80: calc(var(--space--70) * 1.5);
	--space--90: calc(var(--space--80) * 1.5);

	// 1=0.125 Fibonacci数列
	--space--5: calc(0.125 * var(--sUnit));
	--space--10: calc(0.25 * var(--sUnit));
	--space--15: calc(0.375 * var(--sUnit));
	--space--20: calc(0.625 * var(--sUnit));
	--space--30: calc(1 * var(--sUnit));
	--space--40: calc(1.625 * var(--sUnit));
	--space--50: calc(2.625 * var(--sUnit));
	--space--60: calc(4.25 * var(--sUnit));
	--space--70: calc(6.875 * var(--sUnit));

	// --em--5: .125em;
	// --em--10: .25em;
	// --em--20: .5em;
	// --em--30: .75em;
	// --em--40: 1em;
	// --em--50: 1.25em;

	// --p--box-10: 0.5em 0.625em;

	// --p--box--s: 0.75em 0.875em;
	// --p:box:{padding: var(--p--box) calc(--p--box + 0.125em);}
	// --p:box:10{--p--box: var(--em--10)}

	--p--box--s: 0.625em 0.75em;
	--p--box: 1em 1.125em;
	--p--box--l: 1.5em 1.625em;

	--gap--icon--s: 0.25em;
	--gap--icon: 0.5em;
	--gap--icon--l: 0.75em;

	// .is--flow の blockGap 管理用変数
	// --flowGap--xs: var(--space--15);
	--flowGap--m: var(--space--40);
	--flowGap--s: var(--space--20);
	--flowGap--l: var(--space--50);

	// --flowGap--root: var(--flowGap--m); // global値
	--flowGap--heading: 2.5em; // var(--space--50); // フォントサイズ依存

	/* ------------------------------------------------------------
	  radius
	------------------------------------------------------------ */
	// 10,20, ... ?
	--radius--1: 0.125rem; // ≒ 2px
	--radius--2: 0.25rem; // ≒ 4px
	--radius--3: 0.5rem; // ≒ 8px
	--radius--4: 0.75rem; // ≒ 12px
	--radius--5: 1.25rem; // ≒ 20px
	--radius--6: 1.875rem; // ≒ 30px
	--radius--99: 999px;

	/* ------------------------------------------------------------
	  shadow
	------------------------------------------------------------ */

	--shadow--hsl: 0 0% 0%;
	--shadow-strength--base: 0.05;
	--shadow-strength: 0.1;

	// x:y = 1:2 で統一。 layer的な考え方で、10,20...ではなく 1,2,...?
	--shadow-length--0: 0.5px 1px 2px 0px;
	--shadow-length--1: 0.5px 1px 4px 0px;
	--shadow-length--2: 1px 2px 8px 0px;
	--shadow-length--3: 2px 4px 16px 0px;
	--shadow-length--4: 4px 8px 32px 0px;
	// --shadow-length--5: 8px 16px 56px -1px;

	--shadow-color--low: hsl(var(--shadow--hsl) / var(--shadow-strength--base));
	--shadow-color: hsl(var(--shadow--hsl) / var(--shadow-strength));

	// ポイント:
	//    x:yのオフセット比率は一定に保つ. 1:2
	//    [blurサイズ - オフセット] の差は広がっていく
	//    base(0)のshadowを共通で付ける
	//    1段階前のshadowを薄めてつける

	--shadow--1: var(--shadow-length--0) var(--shadow-color--low),
		var(--shadow-length--1) var(--shadow-color);

	--shadow--2: var(--shadow-length--0) var(--shadow-color--low),
		var(--shadow-length--1) var(--shadow-color--low),
		var(--shadow-length--2) var(--shadow-color);

	--shadow--3: var(--shadow-length--0) var(--shadow-color--low),
		var(--shadow-length--2) var(--shadow-color--low),
		var(--shadow-length--3) var(--shadow-color);

	--shadow--4: var(--shadow-length--0) var(--shadow-color--low),
		var(--shadow-length--3) var(--shadow-color--low),
		var(--shadow-length--4) var(--shadow-color);

	--shadow--i1: inset var(--shadow-length--0) var(--shadow-color--low),
		inset var(--shadow-length--1) var(--shadow-color);

	--shadow--i2: inset var(--shadow-length--0) var(--shadow-color--low),
		inset var(--shadow-length--1) var(--shadow-color--low),
		inset var(--shadow-length--2) var(--shadow-color);

	--shadow--i3: inset var(--shadow-length--0) var(--shadow-color--low),
		inset var(--shadow-length--2) var(--shadow-color--low),
		inset var(--shadow-length--3) var(--shadow-color);

	--shadow--i4: inset var(--shadow-length--0) var(--shadow-color--low),
		inset var(--shadow-length--3) var(--shadow-color--low),
		inset var(--shadow-length--4) var(--shadow-color);

	// 1 にすると押し込むような感じになる
	--shadow--hov: var(--shadow--4);

	// ?
	// --hov--bgc--base: var(--b100);

	/* ------------------------------------------------------------
	    装飾
	------------------------------------------------------------ */
	--glass--blur: 20px;
}

// ↓ space: これでもわりとしっくりくる...？ 2:.25, 3: 0.375
// 10: .25
// 20: 0.375
// 30: 0.625
// 40: 1
// 50: 1.625
// 60: 2.625
// 70: 4.25
// 80: 6.875
// 90: 11.125
// 100: 18

// 暖色系テーマ
// --hs--basic: 15 12%;
// --b50: hsl(var(--hs--basic) 96%);
// --b100: hsl(var(--hs--basic) 92%);
// --b200: hsl(var(--hs--basic) 88%);
// --b800: hsl(var(--hs--basic) 30%);
// --b900: hsl(var(--hs--basic) 24%);
// --b950: hsl(var(--hs--basic) 16%);
