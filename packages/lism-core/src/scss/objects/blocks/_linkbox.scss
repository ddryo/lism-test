// e-- かな？
.e--stretchedLink {
	position: absolute;
	inset: 0;
	z-index: 0;
}

:where(.b--linkbox) {
	display: block;
}

.b--linkbox {
	position: relative;
	color: inherit;
	text-decoration: none;
	pointer-events: auto;
	cursor: pointer;
}

/*
	linkboxが a 以外の div　などのとき、直下の stretchedLink と組み合わせて全体をクリックできるようにしつつ、内部にある他の a はクリックできるようにする
	1. stretchedLinkは標準で z:0 で配置される。
	2. その他の兄弟要素を relative にして z関係を有効にし、pointer-events: none でクリックを無効化し、背後のリンクをクリックできるようにする。
		（この時、兄弟要素を z:1 にすることで、stretchedLink が最後に来ても動作するようにしているが、先頭配置のみを考慮するなら z指定は不要。）
	3. 内部のリンク要素は pointer-events: auto でクリックを有効化
*/

// 詳細度 0 で。
:where(.b--linkbox:not(a)) > * {
	pointer-events: none;
	position: relative;
	z-index: 1;
}
.has--stretchedLink {
	position: relative;
	color: inherit;
	text-decoration: none;
	pointer-events: auto;
	cursor: pointer;
	> * {
		pointer-events: none;
		position: relative;
		z-index: 1;
	}
}

// リンクは基本クリックできるように、明示的に指定しておく。
// .b--linkbox a でより確実にクリッカブルにできるが、先祖セレクタになってしまうのでresetに任せる。
a {
	pointer-events: auto;
}

// .b--linkbox a {
// 	pointer-events: auto;
// }

// .b--linkbox {
// 	color: inherit;
// 	text-decoration: none;
// 	position: relative;
// 	cursor: pointer;
// }
// [data-linkbox='div'] > [data-linkbox='a'] {
// 	position: absolute;
// 	z-index: -1;
// 	visibility: hidden;
// 	pointer-events: none;
// }
