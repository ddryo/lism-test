// .alignfull + .alignfull{
// 	margin-block-start: 0;
// }

@layer lism-init {
	.is--container {
		--size: 100%;
		--contentSize--full: 100cqw; // この時点でのcqwをセット
		&[data-size='s'] {
			--size: var(--contentSize--s);
		}
		&[data-size='base'] {
			--size: var(--contentSize--base);
		}
		&[data-size='l'] {
			--size: var(--contentSize--l);
		}
	}
	.is--constrained {
		// --contentSize: var(--contentSize--base);

		&[data-size='s'] {
			--contentSize: var(--contentSize--s);
		}
		&[data-size='base'] {
			--contentSize: var(--contentSize--base);
		}
		&[data-size='l'] {
			--contentSize: var(--contentSize--l);
		}
	}
}

// 内部のコンテンツ幅を制御する
.is--constrained {
	// --contentSize: var(--contentSize--base);
	container-type: inline-size;
	// max-inline-size: 100% !important; // ネストされた時、constrained自体は幅100%で全幅にする。

	// 左寄せ・右寄せ・全幅以外の要素に対して、max-widthを設定する?
	// > :where(:not(.alignleft):not(.alignright):not(.alignfull)),
	> * {
		// サイズ未セット時は base をセット
		max-inline-size: min(100%, var(--contentSize, var(--contentSize--base)));
		margin-inline: auto;
	}
}

// コンテナクエリの基点とする要素。コンテンツ幅を自身の幅にセットして制御したい時にも使う。
// cnstrained より container のサイズセットの優先度高くなるように順番を注意。
.is--container {
	container-type: inline-size;

	// size指定があれば自身のサイズをセット
	&:where([data-size]) {
		margin-inline: auto;
		max-inline-size: var(--size);
	}
}

// .has-global-padding はコア以外の要素で使うと想像した結果にならないことがあるので同じようなことをするクラスを作る
.has--gutter {
	padding-inline: var(--gutter);
}

.alignfull {
	container-type: inline-size;

	// --contentSize: 100%; // これすると内部まで影響してしまう
	.is--constrained > & {
		max-inline-size: 100%;
	}
	.is--container > & {
		// max-inline-size: unset;
		max-inline-size: var(--contentSize--full);
		margin-inline: calc(50% - var(--contentSize--full) / 2);
	}

	.has--gutter > & {
		// --contentSize 変数は min()で100%と比較してるので、直接セット
		max-inline-size: calc(100% + var(--gutter) * 2);
		margin-inline: calc(var(--gutter) * -1);
	}
}

// 幅広の場合はmax-widthを上書きする
.alignwide {
	// --contentSize: var(--contentSize--l);
	container-type: inline-size;

	.is--constrained > & {
		max-inline-size: var(--contentSize--l);
	}

	// スリム幅に対する幅広 = 通常幅 → [page-template='1column']などに対してセットするか？
	// [data-size='s'] > & {
	// 	--contentSize: var(--contentSize--base);
	// }
}
