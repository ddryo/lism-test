@use '../query' as query;

/* stylelint-disable */

/*
gt, gtr, gtc は l--grid 系専用のプロパティ。

parent側: gt, gta だけ BP対応。gd でやっちゃうと auto-flow 系も含めて全プロパティ上書きしてしまう。
item側: row/column だけ BP対応。（areaは親側でエリアを組み替えればOK、かつ、row/columnにもエリア名を指定できるので不要と判断。)
*/
// --------------------
// grid
// --------------------


// --------------------
// grid-template (l--grid で定義している)
// --------------------
// [dir='rtl'] での上書きを変数でできるので grid ではなく、gt でやっている。
.-gt\:side\:s, .-gt\:side\:l { --gt: 'side .' / auto 1fr; }
.-gt\:side\:e, .-gt\:side\:r { --gt: '. side' / 1fr auto; }

// centerが広がる
// .-gt\:3row { --gt: 'start' 'center' 1fr 'end'}
// .-gt\:3col { --gt: 'start center end' / auto 1fr auto; }

// --------------------
// grid-template-areas
// --------------------
.-gta\: { grid-template-areas: var(--gta); }
// [class*="-gta:"]{ grid-template-areas: var(--gta); }

// grid--ltr で ga:s, ga:e を 反転させてもいいかも
.-gta\:3col, .-gta\:3col\:ltr {grid-template-areas: 'start center end';}
.-gta\:3row {grid-template-areas: 'start' 'center' 'end';}

// .-gtc\: { grid-template-columns: var(--gtc); }
// .-gtr\: { grid-template-rows: var(--gtr); }

// --------------------
// grid-auto-
// --------------------
.-gaf\: { grid-auto-flow: var(--gaf); }
// default: row
// .-gaf\:rd { grid-auto-flow: row dense; }
// .-gaf\:c { grid-auto-flow: column; }
// .-gaf\:cd { grid-auto-flow: column dense; }

// styleでいいか？
// .-gac\: { grid-auto-columns: var(--gac); }
// .-gar\: { grid-auto-rows: var(--gar); }


// --------------------
// grid-item系
// --------------------
// bpサポートあるので変数
.-ga\:{ grid-area: var(--ga) }
.-gc\:{ grid-column: var(--gc) }
.-gr\:{ grid-row: var(--gr) }

:where(.l--grid) > .is--side,
.-ga\:side {
	grid-area: side;
}
// .-ga\:fix{ grid-area: fix; }
// .-ga\:l{ grid-area: left; }
// .-ga\:r{ grid-area: right; }
.-ga\:s{ grid-area: start; }
.-ga\:e{ grid-area: end; }
.-ga\:c{ grid-area: center; }
// .-ga\:t{ grid-area: top; }
// .-ga\:b{ grid-area: bottom; }

// start
// end
// .-ga\:head{--ga: head; }
// .-ga\:foot{--ga: foot; }
// .-ga\:body{--ga: body; }

// :where(.-gr\:){--grs: auto;--gre: auto;}
// .-gr\:{ grid-row: var(--grs) / var(--gre) }

// grid-row
// :where(.-gr\:){
// 	--grs: auto;
// 	--gre: auto;
// 	--gr: var(--grs) / var(--gre);
// }
// .-gr\:{
// 	grid-row: var(--gr);
// }
// .-grs\:-1{ --grs: -1 }
// .-grs\:1{ --grs: 1 }
// .-grs\:2{ --grs: 2 }
// .-grs\:3{ --grs: 3 }
// .-gre\:-1{ --gre: -1 }


// grid-row
// [class*="-gr:"]{ grid-row: var(--gr); }
.-gr\:s2{ grid-row: span 2 / span 2 }
.-grs\:1{ grid-row-start: 1 }
.-grs\:2{ grid-row-start: 2 }
.-grs\:3{ grid-row-start: 3 }
.-gre\:-1{ grid-row-end: -1 }


// grid-column
// [class*="-gc:"]{ grid-column: var(--gc); }
.-gc\:s2{ grid-column: span 2 / span 2 }
.-gcs\:1{ grid-column-start: 1 }
.-gcs\:2{ grid-column-start: 2 }
.-gcs\:3{ grid-column-start: 3 }
.-gce\:-1{ grid-column-end: -1 }


// -gt:@sm:, -gt:@sm 


// gt@sm すると　全部上書きしてしまう.--gtc, --gt をわけて使うならgtは使わないようにする必要がある。
// gtc 変える なら gtr も変えることがほとんどだろうから、gt でやってもらう? → RatioGridはgtcのみでコントロールしているので必要。
// ただし、gta は独立して管理できるようにする。
@include query.bp-up('sm') {
	// .-gt\@sm { --gt: var(--gt--sm) }
	.-gta\@sm { grid-template-areas: var(--gta--sm) }
	.-gtc\@sm { grid-template-columns: var(--gtc--sm) }
	.-gtr\@sm { grid-template-rows: var(--gtr--sm) }
	.-gc\@sm { grid-column: var(--gc--sm) }
	.-gr\@sm { grid-row: var(--gr--sm) }
}
@include query.bp-up('md') {
	// .-gt\@md { --gt: var(--gt--md) }
	.-gta\@md { grid-template-areas: var(--gta--md) }
	.-gtc\@md { grid-template-columns: var(--gtc--md) }
	.-gtr\@md { grid-template-rows: var(--gtr--md) }
	.-gc\@md { grid-column: var(--gc--md) }
	.-gr\@md { grid-row: var(--gr--md) }
}
@include query.bp-up('lg') {
	// .-gt\@lg { --gt: var(--gt--lg) }
	.-gta\@lg { grid-template-areas: var(--gta--lg) }
	.-gtc\@lg { grid-template-columns: var(--gtc--lg) }
	.-gtr\@lg { grid-template-rows: var(--gtr--lg) }
	.-gc\@lg { grid-column: var(--gc--lg) }
	.-gr\@lg { grid-row: var(--gr--lg) }
}
