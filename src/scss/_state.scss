@use 'state/padding';
@use 'state/margin';
@use 'state/gap';


.alignfull + .alignfull{
	margin-block-start: 0;
}


// コンテナクエリの基点とする要素
.is--container {
	container-type: inline-size;
}


// 内部のコンテンツ幅を制御する
.is--constrained {
	container-type: inline-size;

	// 左寄せ・右寄せ・全幅以外の要素に対して、max-widthを設定する?
	> :where(:not(.alignleft):not(.alignright):not(.alignfull)) {
		max-width: var(--ls--contentSize);
		margin-right: auto !important;
		margin-left: auto !important;
	}

	// 幅広の場合はmax-widthを上書きする
	> .alignwide {
		max-width: var(--ls--contentSize--wide);
	}
}

.is--constrained.-slim {

	> :where(:not(.alignleft):not(.alignright):not(.alignfull)) {
		max-width: var(--ls--contentSize--slim);
	}

	// 幅広の場合はmax-widthを上書きする
	> .alignwide {
		max-width: var(--ls--contentSize);
	}
}



// .has-global-padding はコア以外の要素で使うと想像した結果にならないことがあるので同じようなことをするクラスを作る
// .has--gutter?　has--sideSpace?
.has--sidePadding {
	padding-right: var(--ls--space--side);
	padding-left: var(--ls--space--side);

	> .alignfull {
		// --pl, --pr > --padding > --ls--space--side
		margin-right: calc(var(--ls--space--side) * -1);
		margin-left: calc(var(--ls--space--side) * -1);
	}
}

[style*="--ls--height:"]{
	height: var(--ls--height) !important;
}
[style*="--ls--width:"]{
	width: var(--ls--width) !important;
}

@container (max-width: 720px) {
	[style*="--ls--width--Qsm:"]{
		width: var(--ls--width--Qsm) !important;
	}
	[style*="--ls--height--Qsm:"]{
		height: var(--ls--height--Qsm) !important;
	}
}

@container (max-width: 440px) {
	[style*="--ls--width--Qxs:"]{
		width: var(--ls--width--Qxs) !important;
	}
	[style*="--ls--height--Qxs:"]{
		height: var(--ls--height--Qxs) !important;
	}
}



.is--flex, .is--grid{
	--ai: normal;
	--ac: normal;
	--jc: normal;
	--ji: legacy;

	align-items: var( --ai );
	align-content: var(--ac);
	justify-content: var( --jc );
	justify-items: var(--ji);
}


// l--flex, l--stack, l--reel, ...
.is--flex{
	--fxw: nowrap;
	--fxd: row;

	display: flex;
	flex-direction: var(--fxd);
	flex-wrap: var(--fxw);

	> * {
		// 予期せぬカラム落ちを防ぐ
		overflow-wrap: anywhere;
	}
}

.is--grid{
	--gta: none;
	--gtc: none;
	--gtr: none;

	// @sm
	--gta--Qsm: var(--gta);
	--gtc--Qsm: var(--gtc);
	--gtr--Qsm: var(--gtr);

	// @xs
	--gta--Qxs: var(--gta--Qsm);
	--gtc--Qxs: var(--gtc--Qsm);
	--gtr--Qxs: var(--gtr--Qsm);

	display: grid;
	grid-template-areas: var(--gta);
	grid-template-columns: var(--gtc);
	grid-template-rows: var(--gtr);

	@container (max-width: 720px) {
		grid-template-areas: var(--gta--Qsm);
		grid-template-columns: var(--gtc--Qsm);
		grid-template-rows: var(--gtr--Qsm);
	}

	@container (max-width: 440px) {
		grid-template-areas: var(--gta--Qxs);
		grid-template-columns: var(--gtc--Qxs);
		grid-template-rows: var(--gtr--Qxs);
	}

	> * {
		// 予期せぬカラム落ちを防ぐ
		overflow-wrap: anywhere;
	}
}



// is--itemにする必要あるか...？
:where(.is--grid, .is--flex) > .is--item{
	--as: auto;
	--js: auto;
	align-self: var(--as);
	justify-self: var(--js);
}


// area, column, row でそれぞれ指定可能にするとコンポーネント側で処理が必要になってくるので、 grid-area で一括指定してもらうようにする
:where(.is--grid) > .is--item {
	--ga: auto;
	grid-area: var(--ga);
}

// --fx だけでいいかも？
:where(.is--flex) > .is--item{
	--fxb: auto;
	--fxg: 0;
	--fxsh: 1;
	--fx: var(--fxg) var(--fxb) var(--fxsh);
	flex: var(--fx);
}

// is--item で使われる。u--ga:hoge のほうがいいか...？
// .is--item[data-ga="left"]{ --ga: left;}
// .is--item[data-ga="right"]{ --ga: right;}
// .is--item[data-ga="top"]{ --ga: top;}
// .is--item[data-ga="bottom"]{ --ga: bottom;}
// .is--item[data-ga="center"]{ --ga: center;}
// .is--item[data-ga="header"]{ --ga: header;}
// .is--item[data-ga="footer"]{ --ga: footer;}
// .is--item[data-ga="body"]{ --ga: body;}
// .is--item[data-ga="aside"]{ --ga: aside;}
// .is--item[data-ga="main"]{ --ga: main;}
// .is--item[data-ga="fix"]{ --ga: fix;}
// .is--item[data-ga="fluid"]{ --ga: fluid;}




// .u--fxw\:w{
// 	flex-wrap:wrap !important;
// }
// .u--fxw\:n{
// 	flex-wrap:nowrap !important;
// }

// align-items
// [class*="u--ai:"],
// [style*="--ls--ai:"]{
// 	align-items: var( --ls--ai ) !important;
// }
// .u--ai\:c{
// 	align-items:center !important;
// }
// .u--ai\:fe{
// 	align-items:flex-end !important;
// }
// .u--ai\:fs{
// 	align-items:flex-start !important;
// }
// .u--ai\:s{
// 	align-items:stretch !important;
// }

// justify-content
// [class*="u--jc:"],
// [style*="--ls--jc:"]{
// 	justify-content: var( --ls--jc ) !important;
// }
// .u--jc\:c{
// 	justify-content:center !important;
// }
// .u--jc\:fe{
// 	justify-content:flex-end !important;
// }
// .u--jc\:fs{
// 	justify-content:flex-start !important;
// }
// .u--jc\:sb{
// 	justify-content:space-between !important;
// }


// .u--jc\:sa{
// 	justify-content:space-around !important;
// }

// [style*="--fxw:"]{
// 	flex-wrap: var(--fxw) !important;
// }
// [style*="--ai:"]{
// 	align-items: var(--ai) !important;
// }
// [style*="--jc:"]{
// 	justify-content: var(--jc) !important;
// }

// [style*="--as:"]{
// 	align-self: var(--as) !important;
// }
// [style*="--js:"]{
// 	justify-self: var(--js) !important;
// }
