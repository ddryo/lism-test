
.is--flex, .is--grid{
	--ai: normal;
	--ac: normal;
	--jc: normal;
	--ji: legacy;

	align-items: var( --ai );
	align-content: var(--ac);
	justify-content: var( --jc );
	justify-items: var(--ji);

	// 予期せぬカラム落ちを防ぐ→ユーティリティで必要なとこだけに指定してもらう
	// > *
	// > :is(div, main, aside, section, article, p){
	// 	overflow-wrap: anywhere;
	// }
}

// グリッドには使用していたほうがよさそう。
.is--grid > .is--item {
	overflow-wrap: anywhere;
}


// l--flex, l--stack, l--reel, ...
.is--flex{
	--fxw: nowrap;
	--fxd: row;

	display: flex;
	flex-direction: var(--fxd);
	flex-wrap: var(--fxw);
}

.is--grid{
	--gta: none;
	--gtc: none;
	--gtr: none;

	// @sm
	--gta--sm: var(--gta);
	--gtc--sm: var(--gtc);
	--gtr--sm: var(--gtr);

	// @xs
	--gta--xs: var(--gta--sm);
	--gtc--xs: var(--gtc--sm);
	--gtr--xs: var(--gtr--sm);

	display: grid;
	grid-template-areas: var(--gta);
	grid-template-columns: var(--gtc);
	grid-template-rows: var(--gtr);

	@container (max-width: 720px) {
		grid-template-areas: var(--gta--sm);
		grid-template-columns: var(--gtc--sm);
		grid-template-rows: var(--gtr--sm);
	}

	@container (max-width: 440px) {
		grid-template-areas: var(--gta--xs);
		grid-template-columns: var(--gtc--xs);
		grid-template-rows: var(--gtr--xs);
	}
}


:where(.is--item){
	--as: auto;
	--js: auto;
	align-self: var(--as);
	justify-self: var(--js);
}

// コンポーネント側で --fx 一つにまとめる？
:where(.is--flex > .is--item) {
	--fxg: 0;
	--fxsh: 1;
	--fxb: auto;
	--fx: var(--fxg) var(--fxsh) var(--fxb);
	--fx--sm: var(--fx);
	--fx--xs: var(--fx--sm);

	flex: var(--fx);
	@container (max-width: 720px) {
		flex: var(--fx--sm);
	}
	@container (max-width: 440px) {
		flex: var(--fx--xs);
	}
}


// area, row/column の指定バランスをどうするか。

// 基本は grid-row/column で指定する。
// :where(.is--grid > .is--item):not([data-grid-area]) {
// 	--gr: auto;
// 	--gc: auto;
// 	grid-row: var(--gr);
// 	grid-column: var(--gc);
// }


:where(.is--grid > .is--item) {
	--ga: auto;
	grid-area: var(--ga);
}

.-gc\: { grid-column: var(--gc) !important;}
.-gr\: { grid-row: var(--gr) !important;}

@container (max-width: 720px) {
	.-gc\@sm\: { grid-column: var(--gc--sm) !important;}
	.-gr\@sm\: { grid-row: var(--gr--sm) !important;}
}

@container (max-width: 440px) {
	.-gc\@xs\: { grid-column: var(--gc--xs) !important;}
	.-gr\@xs\: { grid-row: var(--gr--xs) !important;}
}


.-ga\:fluid{
	--ga: fluid;
}
.-ga\:fix{
	--ga: fix;
}
.-ga\:header{
	--ga: header;
}
.-ga\:footer{
	--ga: footer;
}
.-ga\:body{
	--ga: body;
}


// --------------------
// flex, grid系
// --------------------
.-fxw\:w{
	--fxw:wrap !important;
}
.-fxw\:n{
	--fxw:nowrap !important;
}

.-fxg\:1{
	--fxg: 1;
}
.-fxg\:0{
	--fxg: 0;
}
.-fxsh\:1{
	--fxsh: 1;
}
.-fxsh\:0{
	--fxsh: 0;
}

// align-items
// .-ai\:{
// 	align-items:var(--ai) !important;
// }
[data-lism~="ai:c"]{
	--ai:center;
}
.-ai\:c{
	--ai:center !important;
}
.-ai\:s{
	--ai:stretch !important;
}
// .-ai\:fe{
// 	--ai:flex-end !important;
// }
// .-ai\:fs{
// 	--ai:flex-start !important;
// }


// justify-items
// .-ji\:{
// 	justify-items:var(--ji) !important;
// }
.-ji\:c{
	--ji:center !important;
}
.-ji\:s{
	--ji:stretch !important;
}

// justify-content
// .-jc\:{
// 	justify-content:var(--jc) !important;
// }
.-jc\:c{
	--jc:center !important;
}
.-jc\:sb{
	--jc:space-between !important;
}

// align-content
// .-ac\:{
// 	align-content:var(--ac) !important;
// }
.-ac\:c{
	--ac:center !important;
}
.-ac\:sb{
	--ac:space-between !important;
}


// -self系 → そこまで使われるものではないのでシンプルにstyle属性で出力
// .-as\:{
// 	align-self:var(--as) !important;
// }
// .-js\:{
// 	justify-self:var(--js) !important;
// }

